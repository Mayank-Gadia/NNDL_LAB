'''Program 2: Implement a basic neural network (one or two hidden layers) in Python using libraries like TensorFlow or Keras.
              Use diabetes dataset, Cancer dataset and Sonar dataset. Activation functions â€“ Sigmoid, tanh, ReLU or Softmax.'''

# Install TensorFlow
!pip install tensorflow

# Import necessary libraries
import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Load Breast Cancer dataset
cancer = load_breast_cancer()
X_cancer, y_cancer = cancer.data, cancer.target

# Function to train and evaluate the model
def train_and_evaluate(X, y):
    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Scale the data
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    
    # Create and train the MLP model
    mlp = MLPClassifier(hidden_layer_sizes=(16, 8), activation='relu', max_iter=100, random_state=42)
    mlp.fit(X_train, y_train)
    
    # Predict and calculate accuracy
    y_pred = mlp.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {accuracy:.4f}")
    
    # Display the confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    ConfusionMatrixDisplay(confusion_matrix=cm).plot(cmap=plt.cm.Blues)
    plt.title('Confusion Matrix')
    plt.show()

# Train and evaluate on Breast Cancer dataset
print("Breast Cancer Dataset Results:")
train_and_evaluate(X_cancer, y_cancer)
